BasicType ->
        | 'int'
        | 'bool'
        | 'char'
        | 'string'
        | 'void'

Type ->
        | BasicType
        | Type '[' ']'


Program ->
        | ExternalDeclarationList


ExternalDeclarationList ->
        | ExternalDeclaration
        | ExternalDeclarationList ExternalDeclaration


ExternalDeclaration ->
        | Declaration
        | FunctionDefinition


Block -> 
        | \epsilon
        | Statement Block


Statement ->
        | Declaration ';'
        | Assignment ';'
        | ExpressionStatement ';'
        | Print ';'
        | '{' Block '}'
        | 'if' '(' CompExpr ')' Statement [ 'else' Statement ]
        | 'while' '(' CompExpr ')' Statement
        | 'for' '(' Declaration ';' Expression ';' ForIter ')' Statement
        | 'break' ';'
        | return Expression ';'
        | return ';'


ForIter ->
        | Assignment
        | ExpressionStatement

ExpressionStatement ->
        | PostIncrementExpression

Declaration ->
        | Type id '=' Expression


Assignment ->
        | PrimaryNoArrayCreation '=' Expression
       

Print -> 
        | 'print' '(' Expression ')'


Expression ->
        | Unary
        | Expression BinaryOp Expression


Unary ->
        | Primary
        | '!' Unary
        | '-' Unary
        | '(' Type ')' Unary

Primary ->
        | PrimaryNoArrayCreation
        | 'new' BasicType '[' Expression ']' ( '[' ']' )*
        
PrimaryNoArrayCreation ->
        | '(' Expression ')' 
        | number
        | ''' character '''
        | '"' string '"' 
        | id 
        | id '(' Args ')'
        | PrimaryNoArrayCreation '[' Expression ']'
        | Primary '.' id
        | Primary '.' id '(' Args ')'
        | 'int' '.' id '(' Args ')'
        | 'new' 'string' '(' Args ')'
        | 'null'
        | PostIncrementExpression

PostIncrementExpression ->
        | PrimaryNoArrayCreation '++'
        | PrimaryNoArrayCreation '--'
        

BinaryOp -> '&&' | '||' | '==' | '!=' | '<' | '>' | '<=' | '>=' | '+' | '-' | '*' | '/' | '%';


character ->
        | any character other than a single quote or new line


Args ->
        | Expression
        | Expression, Args


Param -> Type id

Params ->
        | Param
        | Param ',' Params


FunctionDefinition -> Type id '(' Params ')' Block


